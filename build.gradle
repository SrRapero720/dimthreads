import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.8.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.+'
}

base {
    archivesName = modid
    version = "$modloader-mc$mcversion-v$modversion"
}

java.toolchain {
    languageVersion = JavaLanguageVersion.of(17)
}

loom {
    mixin {
        defaultRefmapName = "${modid}.${mixin_refmap_suffix}"
    }

    accessWidenerPath = file("src/main/resources/${modid}.accesswidener")

    mods {
        "${modid}" {
            sourceSet sourceSets.main
        }
    }

}

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/maven' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.parchmentmc.org' }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:$mcversion"
    mappings loom.layered() {
        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-$mcversion:$mappings_version@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${flversion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricversion}"
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "${modauthor}",
                "Specification-Version": "${modversion}",
                "Implementation-Title": "${modname}",
                "Implementation-Version": "${modversion}",
                "Implementation-Vendor" : "${modauthor}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.${mixin_file_suffix}"
        ])
    }
    finalizedBy(remapJar)
}

// Process target resources with mod info
tasks.processResources.outputs.upToDateWhen { false }
processResources {
    filesMatching(['fabric.mod.json', 'pack.mcmeta', "${modid}.${mixin_file_suffix}".toString()]) {
        expand(rootProject.properties)
    }
}

task upload(type: GradleBuild) {
    enabled = System.getenv("MODRINTH_TOKEN") != null && System.getenv("CURSEFORGE_TOKEN") != null
    description 'Uploads new version to CurseForge and Modrinth'
    group = 'publishing'
    tasks = [ 'curseforge', 'modrinth' ]
    dependsOn(remapJar)
}

task curseforge(type: TaskPublishCurseForge) {
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(curseforgeid, remapJar)
    mainFile.displayName = getVersionBuildName()
    mainFile.addModLoader(modloader.toLowerCase().capitalize())
    mainFile.addGameVersion(mcversion, "server", "client")
    mainFile.addIncompatibility("dimensional-threading-reforged")
    mainFile.changelog = getChangelogText(false)
    mainFile.changelogType = "markdown"
    mainFile.releaseType = versiontype
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinthid

    uploadFile = remapJar
    versionName = getVersionBuildName()
    versionNumber = version.toString()
    versionType = versiontype
    gameVersions = [ mcversion ]
    changelog = getChangelogText(true)
    loaders = [ "fabric" ]
}

String getVersionBuildName() {
    return "$modname/${modloader.toLowerCase().capitalize()}/mc$mcversion/v$modversion"
}

String getChangelogText(boolean latest) {
    String result = ''
    for (String line: file('CHANGELOG.md').readLines('UTF-8')) {
        if (latest && line.isEmpty()) return result
        result += line + "\n"
    }
    return result
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}